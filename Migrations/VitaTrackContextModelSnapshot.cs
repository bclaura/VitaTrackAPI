// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VitaTrackAPI.Models;

#nullable disable

namespace VitaTrackAPI.Migrations
{
    [DbContext(typeof(VitaTrackContext))]
    partial class VitaTrackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VitaTrackAPI.Models.Alarm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("activated");

                    b.Property<string>("AlarmType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("alarm_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.HasKey("Id")
                        .HasName("PK__alarms__3213E83FA2888BF9");

                    b.HasIndex("PatientId");

                    b.ToTable("alarms", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.ChartDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChartType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("chart_type");

                    b.Property<string>("DataLabel")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("data_label");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<DateTime?>("RecordedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("recorded_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PK__chart_da__3213E83F972530AF");

                    b.HasIndex("PatientId");

                    b.ToTable("chart_data", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvailabilityHours")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("availability_hours");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("ClinicAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("clinic_address");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("HonorificTitle")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("honorific_title");

                    b.Property<bool?>("IsFavorite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_favorite");

                    b.Property<string>("ProfilePictureBase64")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_base64");

                    b.Property<string>("Specialization")
                        .HasColumnType("text")
                        .HasColumnName("Specialization");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__doctors__3213E83FDA0EFD9A");

                    b.HasIndex("UserId");

                    b.ToTable("doctors", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.EcgSignal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("Signal")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("signal");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__ecg_sign__3213E83F4AEA53E8");

                    b.HasIndex("PatientId");

                    b.ToTable("ecg_signals", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.LocationMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("longitude");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<DateTime?>("RecordedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("recorded_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__location__3213E83FADF021A2");

                    b.HasIndex("PatientId");

                    b.ToTable("location_map", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.MedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .HasColumnType("text")
                        .HasColumnName("allergies");

                    b.Property<string>("CardiologyConsultations")
                        .HasColumnType("text")
                        .HasColumnName("cardiology_consultations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("History")
                        .HasColumnType("text")
                        .HasColumnName("history");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.HasKey("Id")
                        .HasName("PK__medical___3213E83F01EAF7E9");

                    b.HasIndex("PatientId");

                    b.ToTable("medical_history", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__messages__3213E83FF8DD5F48");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdressCity")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("adress_city");

                    b.Property<string>("AdressCounty")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("adress_county");

                    b.Property<string>("AdressStreet")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("adress_street");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Cnp")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("cnp");

                    b.Property<string>("Email")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("email");

                    b.Property<string>("Occupation")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("occupation");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Workplace")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("workplace");

                    b.HasKey("Id")
                        .HasName("PK__patients__3213E83F54B11EF6");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Cnp" }, "UQ__patients__D8361757BFB3D0E9")
                        .IsUnique();

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.PhysicalActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("activity_type");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("PK__physical__3213E83F33CA2DD5");

                    b.HasIndex("PatientId");

                    b.ToTable("physical_activities", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInstructions")
                        .HasColumnType("text")
                        .HasColumnName("additional_instructions");

                    b.Property<int?>("DailyDuration")
                        .HasColumnType("integer")
                        .HasColumnName("daily_duration");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("RecommendationType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("recommendation_type");

                    b.HasKey("Id")
                        .HasName("PK__recommen__3213E83FD58ECA46");

                    b.HasIndex("PatientId");

                    b.ToTable("recommendations", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.SensorDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("SensorType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sensor_type");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PK__sensor_d__3213E83FAF80C8AE");

                    b.HasIndex("PatientId");

                    b.ToTable("sensor_data", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mobile_number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("ProfilePictureBase64")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_base64");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83F33D92526");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E6164BF0A37B1")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("VitaTrackAPI.Models.UserFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("user_favorites");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Alarm", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.Patient", "Patient")
                        .WithMany("Alarms")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__alarms__patient___534D60F1");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.ChartDatum", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.Patient", "Patient")
                        .WithMany("ChartData")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__chart_dat__patie__59FA5E80");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Doctor", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__doctors__user_id__3D5E1FD2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.EcgSignal", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.Patient", "Patient")
                        .WithMany("EcgSignals")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ecg_signa__patie__4AB81AF0");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.LocationMap", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.Patient", "Patient")
                        .WithMany("LocationMaps")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__location___patie__5DCAEF64");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.MedicalHistory", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.Patient", "Patient")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__medical_h__patie__6383C8BA");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Message", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.User", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK__messages__receiv__46E78A0C");

                    b.HasOne("VitaTrackAPI.Models.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__messages__sender__45F365D3");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Patient", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__patients__user_i__412EB0B6");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.PhysicalActivity", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.Patient", "Patient")
                        .WithMany("PhysicalActivities")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__physical___patie__60A75C0F");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Recommendation", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.Patient", "Patient")
                        .WithMany("Recommendations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__recommend__patie__5629CD9C");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.SensorDatum", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.Patient", "Patient")
                        .WithMany("SensorData")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__sensor_da__patie__4E88ABD4");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.UserFavorite", b =>
                {
                    b.HasOne("VitaTrackAPI.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VitaTrackAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.Patient", b =>
                {
                    b.Navigation("Alarms");

                    b.Navigation("ChartData");

                    b.Navigation("EcgSignals");

                    b.Navigation("LocationMaps");

                    b.Navigation("MedicalHistories");

                    b.Navigation("PhysicalActivities");

                    b.Navigation("Recommendations");

                    b.Navigation("SensorData");
                });

            modelBuilder.Entity("VitaTrackAPI.Models.User", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
